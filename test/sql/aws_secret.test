# name: test/sql/aws_secret.test
# description: test aws extension with the s3 env vars set
# group: [aws]

require aws

require httpfs

statement ok
set secret_directory='__TEST_DIR__/aws_secret'

# Happy path: just get me an s3 secret using the aws chain
statement ok
CREATE SECRET (
    TYPE S3,
    PROVIDER credential_chain
);

# Happy path for persisent secret: store whatever the aws chain might cook up as a persistent secret
statement ok
CREATE PERSISTENT SECRET (
    TYPE S3,
    PROVIDER credential_chain
);

# Lets confirm all overrides work
statement ok
CREATE SECRET aws_all_s3_params_set (
    TYPE S3,
    PROVIDER credential_chain,
    KEY_ID 'key_override',
    SECRET 'secret_override',
    REGION 'region_override',
    ENDPOINT 'endpoint_override',
    USE_SSL true,
    SESSION_TOKEN 'session_override',
    URL_STYLE 'style_override',
    URL_COMPATIBILITY_MODE true
);

# Now confirm the secrets are correct
query IIIIIII
SELECT * from duckdb_secrets(redact=false) order by name, storage;
----
__default_s3	s3	credential_chain	1	local_file	[]	name=__default_s3;type=s3;provider=credential_chain;serializable=true;scope;key_id=minio_duckdb_user;region=eu-west-1;secret=minio_duckdb_user_password;session_token=
__default_s3	s3	credential_chain	0	memory	[]	name=__default_s3;type=s3;provider=credential_chain;serializable=true;scope;key_id=minio_duckdb_user;region=eu-west-1;secret=minio_duckdb_user_password;session_token=
aws_all_s3_params_set	s3	credential_chain	0	memory	[]	name=aws_all_s3_params_set;type=s3;provider=credential_chain;serializable=true;scope;endpoint=endpoint_override;key_id=key_override;region=region_override;secret=secret_override;session_token=session_override;url_style=style_override;use_ssl=true